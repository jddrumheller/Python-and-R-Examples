geom_point()
bst.out <- gbm(as.character(income) ~ . -id,
data = adult.trn[-tst.index,],
distribution = 'bernoulli',
n.trees = 1000,
interaction.depth = 7,
shrinkage = 0.05)
bst.probs.trn <- predict(bst.out, newdata = adult.trn[-tst.index,],
type = 'response',
n.trees = 1000)
bst.probs.tst <- predict(bst.out, newdata = adult.trn[tst.index,],
type = 'response',
n.trees = 1000)
bst.preds.trn <- rep(0, length.out = length(bst.probs.trn))
bst.preds.tst <- rep(0, length.out = length(bst.probs.tst))
bst.preds.trn[bst.probs.trn > 0.4] <- 1
bst.preds.tst[bst.probs.tst > 0.4] <- 1
confusionMatrix(factor(bst.preds.trn), adult.trn$income[-tst.index])
confusionMatrix(factor(bst.preds.tst), adult.trn$income[tst.index])
bst.preds.trn <- rep(0, length.out = length(bst.probs.trn))
bst.preds.tst <- rep(0, length.out = length(bst.probs.tst))
bst.preds.trn[bst.probs.trn > 0.5] <- 1
bst.preds.tst[bst.probs.tst > 0.5] <- 1
confusionMatrix(factor(bst.preds.trn), adult.trn$income[-tst.index])
confusionMatrix(factor(bst.preds.tst), adult.trn$income[tst.index])
lst.prbs <- seq(from = 0.1, to = 0.9, by = 0.05)
lst.acc <- 1:length(lst.prbs)
for(iter in 1:length(lst.prbs)) {
bst.probs <- predict(bst.out,
newdata = adult.train[tst.index,],
type = 'response',
n.tress = 1000)
bst.preds <- rep(0, length.out = length(bst.probs))
bst.preds[bst.probs > lst.prbs[iter]] <- 1
tab <- table(bst.preds, adult.train$income[tst.index])
lst.acc[iter] <- (tab[1,1] + tab[2,2]) / sum(tab)
}
prb.acc.df <- data.frame(lst.prbs, lst.acc)
ggplot(data = prb.acc.df, aes(x = lst.prbs, y =lst.acc)) +
geom_line() +
geom_point()
set.seed(578)
bst.out <- gbm(as.character(income) ~ . -id,
data = adult.trn[-tst.index,],
distribution = 'bernoulli',
n.trees = 1000,
interaction.depth = 7,
shrinkage = 0.05)
bst.probs.trn <- predict(bst.out, newdata = adult.trn[-tst.index,],
type = 'response',
n.trees = 1000)
bst.probs.tst <- predict(bst.out, newdata = adult.trn[tst.index,],
type = 'response',
n.trees = 1000)
bst.preds.trn <- rep(0, length.out = length(bst.probs.trn))
bst.preds.tst <- rep(0, length.out = length(bst.probs.tst))
bst.preds.trn[bst.probs.trn > 0.5] <- 1
bst.preds.tst[bst.probs.tst > 0.5] <- 1
confusionMatrix(factor(bst.preds.trn), adult.trn$income[-tst.index])
confusionMatrix(factor(bst.preds.tst), adult.trn$income[tst.index])
lst.prbs <- seq(from = 0.1, to = 0.9, by = 0.05)
lst.acc <- 1:length(lst.prbs)
for(iter in 1:length(lst.prbs)) {
bst.probs <- predict(bst.out,
newdata = adult.train[tst.index,],
type = 'response',
n.tress = 1000)
bst.preds <- rep(0, length.out = length(bst.probs))
bst.preds[bst.probs > lst.prbs[iter]] <- 1
tab <- table(bst.preds, adult.train$income[tst.index])
lst.acc[iter] <- (tab[1,1] + tab[2,2]) / sum(tab)
}
prb.acc.df <- data.frame(lst.prbs, lst.acc)
ggplot(data = prb.acc.df, aes(x = lst.prbs, y =lst.acc)) +
geom_line() +
geom_point()
?gbm
rf.out <- randomForest(income ~ . - id,
data = adult.trn[-tst.index],
ntree = 2500)
library(randomForest)
rf.out <- randomForest(income ~ . - id,
data = adult.trn[-tst.index],
ntree = 2500)
rf.preds.trn <- predict(rf.out, newdata = adult.trn[-tst.index,], type = "response")
rf.preds.tst <- predict(rf.out, newdata = adult.trn[tst.index,], type = "response")
confusionMatrix(factor(rf.preds.trn), adult.trn$income[-tst.index])
confusionMatrix(factor(rf.preds.tst), adult.trn$income[tst.index])
rf.final <- randomForest(income ~ . - id,
data = adult.train,
ntree = 2500)
rf.final <- randomForest(income ~ . - id,
data = adult.trn,
ntree = 2500)
rf.testSet.preds <- predict(rf.final, newdata = adult.tst, type = "response")
rf.pred.df <- data.frame(id = adult.tst$id, income = rf.testSet.preds)
levels(rf.pred.df$income) <- c("<=50K", ">50K")
head(rf.pred.df)
write.csv(rf.pred.df, "RFpreds.csv", row.names = FALSE)
varImp(rf.final)
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.15,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.05,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.075,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.09,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 200,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 100,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 400,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.trn$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.trn[tst.index,])
xg.val.target <- as.numeric(as.character(adult.trn$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.15,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 400,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 200,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 100,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 150,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 6,
nrounds = 150,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 8,
nrounds = 150,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 150,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
set.seed(5)
n <- dim(adult.train)[1]
tst.index <- sample(1:n, size = round(n*0.2))
## All trining data prepped
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.trn)
xg.trn.target <- as.numeric(as.character(adult.trn$income))
## All testing data prepped
xg.test <- model.matrix(~. - 1 - id, data = adult.tst)
## Fit the model
xgboost.final <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 300,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
## Make predictions
xg.probs <- predict(xgboost.final, newdata = xg.test, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
## Reform the data
xg.pred.df <- data.frame(id = adult.tst$id, income = factor(xg.preds))
levels(xg.pred.df$income) <- c("<=50K", ">50K")
head(xg.pred.df)
write.csv(xg.pred.df, "XGbst.csv", row.names = FALSE)
set.seed(5)
n <- dim(adult.train)[1]
tst.index <- sample(1:n, size = round(n*0.2))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 150,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
set.seed(234)
n <- dim(adult.train)[1]
tst.index <- sample(1:n, size = round(n*0.2))
xg.trn <- model.matrix(income ~ . - 1 - id, data = adult.train[-tst.index,])
xg.trn.target <- as.numeric(as.character(adult.train$income[-tst.index]))
xg.val <- model.matrix(income ~ . - 1 - id, data = adult.train[tst.index,])
xg.val.target <- as.numeric(as.character(adult.train$income[tst.index]))
xgboost.out <- xgboost(data = xg.trn,
label = xg.trn.target,
max.depth = 7,
nrounds = 150,
eta = 0.1,
verbose = 0,
objective = "binary:logistic")
xg.probs <- predict(xgboost.out, newdata = xg.val, type = 'response')
xg.preds <- rep(0, length.out = length(xg.probs))
xg.preds[xg.probs > 0.5] <- 1
xg.tab <- table(xg.preds, xg.val.target)
(xg.tab[1,1] + xg.tab[2,2])/ (sum(xg.tab))
summary(bst.final)
bst.final <- gbm(as.character(income) ~ . -id,
data = adult.train,
distribution = 'bernoulli',
n.trees = 1000,
interaction.depth = 8,
shrinkage = 0.05)
summary(bst.final)
setwd("C:/Users/jddru/Desktop/ForestCover")
library(tidyverse)
forest <- read.csv('covtype.csv', header = TRUE)
str(forest)
wilderness.count <- forest %>% group_by(Wilderness_Area1, Wilderness_Area2,
Wilderness_Area3, Wilderness_Area4,
factor(Cover_Type)) %>%
summarise(counts = n())
wilderness.count
wilderness.count <- forest %>% group_by(Wilderness_Area1, Wilderness_Area2,
Wilderness_Area3, Wilderness_Area4,
Cover_Type) %>%
summarise(counts = n())
wilderness.count
ggplot(data = wilderness.count %>% filter(Wilderness_Area1 == 1),
aes(x = Cover_Type, y = count)) +
geom_bar()
ggplot(data = wilderness.count %>% filter(Wilderness_Area1 == 1),
aes(x = Cover_Type, y = counts)) +
geom_bar()
wilderness.count %>% filter(Wilderness_Area1 == 1),
wilderness.count %>% filter(Wilderness_Area1 == 1)
ggplot(data = wilderness.count %>% filter(Wilderness_Area1 == 1),
aes(x = factor(Cover_Type), y = counts)) +
geom_bar()
ggplot(data = wilderness.count %>% filter(Wilderness_Area1 == 1),
aes(x = factor(Cover_Type), y = counts)) +
geom_bar(stat = 'identity')
setwd("C:/Users/jddru/Desktop/ForestCover")
library(tidyverse)
forest <- read.csv('covtype.csv', header = TRUE)
wilderness.count
wilderness.count <- forest %>% group_by(Wilderness_Area1, Wilderness_Area2,
Wilderness_Area3, Wilderness_Area4,
Cover_Type) %>%
summarise(counts = n())
wilderness.count
